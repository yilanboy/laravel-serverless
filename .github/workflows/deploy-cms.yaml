name: Deploy my blog CMS to AWS Lambda

on:
  workflow_dispatch:
    inputs:
      name:
        description: Who to greet
        default: Allen

permissions:
  id-token: write
  contents: read

jobs:
  deploy-laravel-to-lambda:
    name: Deploy my blog CMS to AWS Lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # https://github.com/actions/checkout
        uses: actions/checkout@v4

      - name: Configure aws credentials
        # https://github.com/aws-actions/configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::154471991214:role/github_action
          aws-region: us-west-2

      - name: Setup php
        # https://github.com/shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"

      - name: Setup terraform
        # https://github.com/hashicorp/setup-terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy to AWS Lambda
        run: |
          git clone "${{ vars.CMS_APP_GITHUB_URL }}" laravel-app

          cd laravel-app

          # install composer dependencies
          composer install --prefer-dist --optimize-autoloader --no-dev
          php artisan optimize
          php artisan config:clear
          php artisan migrate --force
          php artisan wayfinder:generate

          # generate front-end assets
          npm ci
          npm run build

          # enable bref pgsql extension in lambda if you need it
          # https://bref.sh/docs/environment/php#extensions-installed-but-disabled-by-default
          # mkdir -p php/conf.d
          # echo "extension=pdo_pgsql" > php/conf.d/pgsql.ini

          # remove unnecessary files
          rm -rf node_modules
          rm -rf public/storage
          rm -rf resources/assets
          rm -rf resources/css
          rm -rf resources/images
          rm -rf resources/js
          rm -rf resources/ts
          rm -rf storage
          rm -rf tests
          rm -rf .git
          rm -rf .github
          rm database/database.sqlite

          # zip the laravel app
          zip -r "../laravel-app.zip" .

          cd ..

          # create terraform config file
          cat <<EOF > terraform.config
          bucket="us-west-2-terraform-state-storage"
          key="us-west-2-blog-cms-serverless.tfstate"
          region="us-west-2"
          dynamodb_table="us-west-2-terraform-state-locking"
          EOF

          # deploy
          terraform init -backend-config="./terraform.config"
          terraform apply \
            -var="enable_vpc=true" \
            -var='subnet_ids=${{ secrets.CMS_SUBNET_IDS }}' \
            -var='security_group_ids=${{ secrets.CMS_SECURITY_GROUP_IDS }}' \
            -var="enable_filesystem=true" \
            -var="access_point_arn=${{ secrets.CMS_ACCESS_POINT_ARN }}" \
            -var="app_name=${{ vars.CMS_APP_NAME }}" \
            -var="tag_service=${{ vars.CMS_TAG_SERVICE }}" \
            -var="tag_environment=${{ vars.CMS_TAG_ENVIRONMENT }}" \
            -var="tag_owner=${{ vars.CMS_TAG_OWNER }}" \
            -var="app_key=${{ secrets.CMS_APP_KEY }}" \
            -var="app_url=${{ vars.CMS_APP_URL }}" \
            -var="asset_url=${{ vars.CMS_ASSET_URL }}" \
            -var="aws_bucket=${{ vars.CMS_AWS_BUCKET }}" \
            -var="aws_url=${{ vars.CMS_AWS_URL }}" \
            -var="mail_host=${{ vars.CMS_MAIL_HOST }}" \
            -var="mail_username=${{ secrets.CMS_MAIL_USERNAME }}" \
            -var="mail_password=${{ secrets.CMS_MAIL_PASSWORD }}" \
            -var="mail_from_address=${{ secrets.CMS_MAIL_FROM_ADDRESS }}" \
            -var="certificate_arn=${{ secrets.CMS_CERTIFICATE_ARN }}" \
            -var="custom_domain_name=${{ vars.CMS_CUSTOM_DOMAIN_NAME }}" \
            -var="filename=./laravel-app.zip" \
            -auto-approve

          # sync front-end assets to s3 bucket
          aws s3 sync laravel-app/public "s3://${{ vars.CMS_ASSET_AWS_BUCKET }}"
